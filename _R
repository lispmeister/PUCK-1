PuckApp
=======

# Purpose

First test server using restify server and JSON file backend.
Most of the code currently is derived from todoapp which comes
as an example with restify. See the license file for details.

# Install Modules and Tools
Here is a list of tools used with project development

## Install Redis key value store

    brew install redis

Make sure the redis server is up and running. The node server needs
to be able to connect to it. You can use =redis-cli= to check if the
server is up.

## Node and NPM
On OSX install node via brew. This also installs npm.

    brew install node

As always with brew make sure your user has write permissions for
all files in /usr/local or you won't be able to install the npm
packages below. There are ways to install npm packages in other
locations and on a per project basis, but we'll ignore that for now.

## Redis and Hiredis
Install the plugins

    npm install redis hiredis

### Restify
We use restify to implement the verbs on a RESTful server.

    npm install restify

Link: [restify](https://github.com/mcavage/node-restify#readme)

### Nodeunit
Unit testing tool

    npm install nodeunit

### Nodemon
We use nodemon to monitor project files during development. The running
node server will be restarted at each code change.

    npm install -g nodemon

And then start the server with:

    nodemon server.js

Link: [nodemon](https://github.com/remy/nodemon#readme)

### Jsontool
We test using Curl on the command line. Jsontool should be installed.

    npm install -g jsontool

Link: [json](https://github.com/trentm/json#readme)

### Bunyan
We use bunyan for logging. To be able to parse logs on the command line we
install the bunyan binary globally.

    npm install bunyan
    npm install -g bunyan

Link: [bunyan](https://github.com/trentm/node-bunyan#readme)

## Tutorials utilized for this test
* [nodeknockout](http://blog.nodeknockout.com/post/34710903021/restify)
* [todoapp](https://github.com/mcavage/node-restify/tree/master/examples/todoapp)

## How do I run this?

First, this has a `package.json`, so you'll need to run `npm install` in the
directory. Once you've done that, to get started _and_ see audit logs on your
terminal, run it like this:

    node main.js 2>&1 | bunyan --no-color

If you want to see all the built in restify tracing:

    node main.js -vv 2>&1 | bunyan --no-color

By default, this program writes to a directory in `/tmp`, but you can override
with a `-d` option.  Additionally, by default it does not require
authentication, but you can require that with:

    node main.js -u admin -z secret 2>&1 | bunyan --no-color

Lastly, re: the `2>&1 | bunyan` bit.  In production, you assuredly would *not*
want to pipe to the [bunyan](https://github.com/trentm/node-bunyan) CLI, but
rather capture the audit records in their raw form, so they would be easy to
post process and perform analytics on.  Like all UNIX programs should, this
example writes "informational" messages to `stderr`, and `audit` records to
stdout.  It's up to you to redirect them as appropriate.

Run the server and parse the logs. The server writes Pucks as files
into /tmp as JSON.

    node main.js -u admin -z secret 2>&1 | bunyan --no-color

List available operations

    curl -isS http://127.0.0.1:8080 | json

Ping the Puck

    curl -isS http://127.0.0.1:8080/ping | json

Ping the Puck with ID

    curl -isS http://127.0.0.1:8080/ping/1234567890 | json

Create a Puck with more complex JSON structure

    curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '@a-puck.json' http://localhost:8080/puck

List all Pucks

    curl -isS http://127.0.0.1:8080/puck | json
 
Get Puck

    curl -isS http://127.0.0.1:8080/puck/5C6BA08E8D9B8419EB71201BD89D04ABE35D5B36 | json

Delete a Puck

    curl -v -H "Accept: application/json" -H "Content-type: application/json" -X DELETE http://localhost:8080/puck/5C6BA08E8D9B8419EB71201BD89D04ABE35D5B36

Request OpenVPN server start. This returns "OK" if we succeed.

    curl -isS http://127.0.0.1:8080/startVPN

* * *
Stuff below this line is not implemented yet for the Redis backend

Update a Puck with new data

    curl -v -H "Accept: application/json" -H "Content-type: application/json" -X PUT -d '@a-puck-value.json' http://localhost:8080/puck/5C6BA08E8D9B8419EB71201BD89D04ABE35D5B36

    
## Testing PuckApp
To run the existing tests for PuckApp you first clear the existing
database using the redis-cli:

    redis-cli
    flushdb
    exit

Then you start the test suite:

    npm test









