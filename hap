
#
# HAProxy conf for d3ck
#

global
    maxconn 99                                      # got 99 problems, but connections ain't one
    ssl-server-verify none

    daemon

    debug

#
# seem reasonable, from various net examples
#
defaults
    timeout client      25s
    timeout connect      5s
    timeout server      25s
    timeout connect      5s
    timeout queue        5s
    timeout server      30s
    timeout tunnel       1h

    option http-keep-alive

frontend wwws
    mode http

    # pass along cert info
#   http-request set-header X-SSL                       %[ssl_fc]
#   http-request set-header X-SSL-Client-Verify         %[ssl_c_verify]
#   http-request set-header X-SSL-Client-SHA1           %{+Q}[ssl_c_sha1]
#   http-request set-header X-SSL-Client-DN             %{+Q}[ssl_c_s_dn]
#   http-request set-header X-SSL-Client-CN             %{+Q}[ssl_c_s_dn(cn)]
#   http-request set-header X-SSL-Issuer                %{+Q}[ssl_c_i_dn]
#   http-request set-header X-SSL-Client-Not-Before     %{+Q}[ssl_c_notbefore]
#   http-request set-header X-SSL-Client-Not-After      %{+Q}[ssl_c_notafter]


    # 
    # bind :8080 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all ciphers ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH

    # bind :8080 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA

    # bind :8080 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all ciphers RC4:HIGH:!aNULL:!MD5

    # stateful SSL session resumption:
    #
    #   no-tls-tickets
    #

    # no beast:
    # http://blog.haproxy.com/2013/01/21/mitigating-the-ssl-beast-attack-using-the-aloha-load-balancer-haproxy/
    #
    #   ciphers RC4:HIGH:!aNULL:!MD5

    #
    # want this as well...?
    #
    # !eNULL
    #
    # yes, according to... https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html
    #
    # AES256+EECDH:AES256+EDH:!aNULL:!eNULL
    #

    #bind :8080 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all ciphers AES256+EECDH:AES256+EDH:RC4:HIGH:!MD5:!aNULL:!eNULL:!EDH
    # bind :443 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all ciphers AES256+EECDH:AES256+EDH:RC4:HIGH:!MD5:!aNULL:!eNULL:!EDH

    # and... pfs, according to - 

    # bind :443 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA:HIGH:!MD5:!aNULL:!eNULL:!EDH

    # mozilla recommendations: https://wiki.mozilla.org/Security/Server_Side_TLS

    # verify optional -> client side certs - for d3ck-2-d3ck

    # bind :8080 ssl crt /etc/d3ck/d3cks/D3CK/d3ck.all ca-file /etc/d3ck/d3cks/D3CK/ca.crt verify required ciphers TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK


# xxxxxx
#   acl sslv3 req_ssl_ver 3:3.1

#   bind :8080 ssl crt d.crt ca-file /etc/d3ck/d3cks/D3CK/ca.crt verify required

    # bind :8080 ssl all d3cks/D3CK/d3ck.all ca-file d3cks/D3CK/ca.crt  verify optional crt-ignore-err all
    # bind :8080 ssl crt d3cks/D3CK/d3ck.all ca-file d3cks/D3CK/ca.crt  verify optional
    bind :8080 ssl crt s.k ca-file d3cks/D3CK/ca.crt  verify required

    http-request set-header X-SSL                  %[ssl_fc]
    http-request set-header x-dan    %[ssl_c_verify]
    http-request set-header X-SSL-Client-DN        %{+Q}[ssl_c_s_dn]
    http-request set-header X-SSL-Client-CN        %{+Q}[ssl_c_s_dn(cn)]
    http-request set-header X-SSL-Issuer           %{+Q}[ssl_c_i_dn]
    http-request set-header X-SSL-Client-NotBefore %{+Q}[ssl_c_notbefore]
    http-request set-header X-SSL-Client-NotAfter  %{+Q}[ssl_c_notafter]


### xxxx
#   use_backend ssl-error unless { ssl_c_verify 0 }
#   use_backend ssl-error     if { ssl_fc_has_crt }


    rspadd Strict-Transport-Security:\ max-age=31536000

    rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure
 
    timeout client 1h

    acl is_sig path_beg /socket.io
    use_backend sock_signalz if is_sig

    acl is_websocket path_beg /catz
    acl is_websocket hdr(Upgrade) -i WebSocket

    use_backend websocket_backend if is_sig
    use_backend websocket_backend if is_websocket

    # if all else fails... web
    default_backend www_backend

#
# web
#
backend ssl-error
    mode http
    option forwardfor
    reqadd x-forwarded-proto:\ https
 
    server d3ck_www :8888 weight 1 maxconn 16384 check
 
#
# web
#
backend www_backend
    mode http
    option forwardfor
    reqadd x-forwarded-proto:\ https
 
    server d3ck_www :9000 weight 1 maxconn 16384 check
 
#
# web sockets
#
backend websocket_backend
    mode http
    option forwardfor
#   option http-server-close
#   option forceclose
    no option httpclose

    server d3ck_sox :5555 weight 1 maxconn 16384 check
 

#
# web RTC, may go local or to a remote d3ck
#
backend sock_signalz
    mode http
    option forwardfor
#   option http-server-close
#   option forceclose
    no option httpclose

    server d3ck_sox :5555 weight 1 maxconn 999 check
 
